/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

import com.google.gson.GsonBuilder
import com.google.gson.JsonArray
import com.google.gson.JsonElement
import net.cnri.cordra.CordraHooksSupportProvider
import net.cnri.cordra.CordraMethod
import net.cnri.cordra.CordraType
import net.cnri.cordra.CordraTypeInterface
import net.cnri.cordra.HooksContext
import java.util.logging.Logger

@CordraType("Dataset")
class DatasetType : CordraTypeInterface {
    companion object {
        val cordra = CordraHooksSupportProvider.get().cordraClient
        val logger = Logger.getLogger(this::class.simpleName)

        private fun addAuthor(author: JsonElement): String = cordra.create("Person", author).id

        @CordraMethod("fromNested")
        @JvmStatic
        fun fromNested(ctx: HooksContext): JsonElement {
            val obj = ctx.params.asJsonObject
            logger.info { "processing $obj." }

            // add authors as objects
            val authorRefs: Set<String> = if (obj.has("author")) {
                val authors = obj.get("author")
                if (authors.isJsonArray) {
                    authors.asJsonArray.map { addAuthor(it) }.toSet()
                } else {
                    setOf(addAuthor(authors))
                }
            } else {
                emptySet()
            }

            val authorJson = JsonArray()
            authorRefs.forEach { authorJson.add(it) }
            obj.add("author", authorJson)

            cordra.create("Dataset", obj)
            return obj
        }
    }

}
