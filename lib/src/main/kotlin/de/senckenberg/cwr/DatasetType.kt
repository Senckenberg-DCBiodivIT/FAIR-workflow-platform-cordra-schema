/*
 * This source file was generated by the Gradle 'init' task
 */
package de.senckenberg.cwr

import com.google.gson.Gson
import com.google.gson.JsonElement
import com.google.gson.JsonObject
import net.cnri.cordra.CordraHooksSupportProvider
import net.cnri.cordra.CordraMethod
import net.cnri.cordra.CordraType
import net.cnri.cordra.CordraTypeInterface
import net.cnri.cordra.HooksContext
import net.cnri.cordra.api.CordraException
import net.cnri.cordra.api.CordraObject
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.util.logging.Logger

@CordraType("Dataset")
class DatasetType : CordraTypeInterface {

    override fun beforeSchemaValidation(co: CordraObject, ctx: HooksContext): CordraObject {
        val json = co.content.asJsonObject

        if (json.has("about") && json.get("about").isJsonObject) {
            if (!Validator.validateIdentifier(json.get("about").asJsonObject)) {
                throw CordraException.fromStatusCode(400, "Taxon identifier is not a valid URI identifier.")
            }
        }

        return co
    }

    @CordraMethod("toCrate", allowGet = true)
    fun toROCrate(obj: CordraObject, ctx: HooksContext): JsonElement {
        // TODO parse RO Crate
        return Gson().toJsonTree(Unit)
    }

    companion object {
        val cordra = CordraHooksSupportProvider.get().cordraClient
        val logger = Logger.getLogger(this::class.simpleName)

        private fun addAuthor(author: JsonElement): String = cordra.create("Person", author).id

        private fun <T> processIfExists(obj: JsonObject, key: String, processingFunction: (JsonElement) -> T): Set<T> {
            if (!obj.has(key)) {
                return emptySet()
            }

            val elements = obj.get(key)
            return if (elements.isJsonArray) {
                elements.asJsonArray.map(processingFunction).toSet()
            } else {
                setOf(processingFunction(elements))
            }
        }

        @Throws(CordraException::class)
        @CordraMethod("parseJSONDataset")
        @JvmStatic
        fun fromNested(ctx: HooksContext): JsonElement {
            val json = ctx.params.asJsonObject!!
            logger.info { "processing $json." }

            // add authors as objects
            propertyToReferences(json, "author", "Person", asArray = true)

            // add taxon
            // TODO also accept string as about reference?
            if  (json.has("about")) {
                val taxon = json.get("about").asJsonObject
                applyTypeAndContext(taxon, "Taxon", "https://schema.org")
            }

            // timestamps
            val now = LocalDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME)
            print(now)
            json.addProperty("dateCreated", now)
            json.addProperty("dateModified", now)
            json.addProperty("datePublished", now)

            // creating dataset
            applyTypeAndContext(json, "Dataset", "https://schema.org")

            val obj = cordra.create("Dataset", json)
            return obj.content
        }
    }

}
